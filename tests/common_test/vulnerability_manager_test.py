from unittest import TestCase
from unittest.mock import MagicMock
from openwebvulndb.common import VulnerabilityManager, VulnerabilityList, VersionRange, Reference, Vulnerability
from openwebvulndb.common.errors import VulnerabilityNotFound


class VulnerabilityManagerTest(TestCase):

    def setUp(self):
        self.empty_storage = MagicMock()
        self.empty_storage.read_vulnerabilities.side_effect = FileNotFoundError()

    def test_manager_starts_with_nothing_open(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        self.assertEqual(0, len(manager.files))

    def test_obtained_vulnerability_list_contains_producer(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        data = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        self.assertIsInstance(data, VulnerabilityList)
        self.assertEqual(data.producer, "VaneImporter")
        self.assertEqual(data.key, "plugins/some-key")

    def test_check_identity(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        a_1 = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        a_2 = manager.get_producer_list("VaneImporter", "plugins", "some")
        b_1 = manager.get_producer_list("ImporterX", "plugins", "some-key")

        same = manager.get_producer_list("VaneImporter", "plugins", "some-key")

        self.assertIs(a_1, same)

        self.assertIsNot(a_1, a_2)
        self.assertIsNot(b_1, a_2)
        self.assertIsNot(b_1, a_1)

    def test_create_missing_vulnerabilities(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")

        a_1 = vlist.get_vulnerability(123, create_missing=True)
        a_2 = vlist.get_vulnerability("123", create_missing=True)
        self.assertIs(a_1, a_2)

    def test_read_missing(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")

        with self.assertRaises(VulnerabilityNotFound):
            vlist.get_vulnerability(123)

    def test_load_existing_data(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        vlist.get_vulnerability(123, create_missing=True).title = "Hello World"

        storage = MagicMock()
        storage.read_vulnerabilities.return_value = vlist

        manager = VulnerabilityManager(storage=storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")

        self.assertEqual(vlist.get_vulnerability(123).title, "Hello World")

    def test_load_all_from_storage_for_key(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        vlist.get_vulnerability(123, create_missing=True).title = "Hello World"

        storage = MagicMock()
        storage.read_vulnerabilities.return_value = vlist
        storage.list_vulnerabilities.return_value = [
            VulnerabilityList(producer="MyProducerA", key="plugins/some-key"),
            VulnerabilityList(producer="MyProducerB", key="plugins/some-key"),
            VulnerabilityList(producer="MyProducerC", key="plugins/some-key"),
            VulnerabilityList(producer="VaneImporter", key="plugins/some-key"),
        ]

        manager = VulnerabilityManager(storage=storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        lists = list(manager.get_lists("plugins", "some-key"))

        self.assertIs(vlist, lists[3])
        self.assertEqual("MyProducerA", lists[0].producer)

    def test_no_write_until_flush(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        vlist.get_vulnerability(123, create_missing=True).title = "Hello World"

        self.empty_storage.write_vulnerabilities.assert_not_called()

        manager.flush()

        self.empty_storage.write_vulnerabilities.assert_called_with(vlist)
        self.empty_storage.reset_mock()

        # Subsequent flush does not write
        manager.flush()
        self.empty_storage.write_vulnerabilities.assert_not_called()

    def test_do_not_write_empty_files(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        manager.get_producer_list("VaneImporter", "plugins", "some-key")

        self.empty_storage.write_vulnerabilities.assert_not_called()

        # Make sure we do not write when there are no changes
        manager.flush()

        self.empty_storage.write_vulnerabilities.assert_not_called()

    def test_write_new_files(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        vlist.get_vulnerability(123, create_missing=True).title = "Hello World"

        self.empty_storage.write_vulnerabilities.assert_not_called()

        # Make sure we do not write when there are no changes
        manager.flush()

        self.empty_storage.write_vulnerabilities.assert_called_with(vlist)

    def test_changes_trigger_write(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        vlist.get_vulnerability(123, create_missing=True).title = "Hello World"

        self.assertTrue(vlist.dirty)

        vlist.clean()
        self.assertFalse(vlist.dirty)

        vlist.get_vulnerability(123, create_missing=True).title = "Hello World"
        self.assertFalse(vlist.dirty)

        vlist.get_vulnerability(123, create_missing=True).title = "Different Value"
        self.assertTrue(vlist.dirty)

    def test_filter_applicable_vulnerabilities_no_lists(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        self.assertEqual([], list(manager.filter_for_version("1.0", [])))

    def test_filter_applicable_vulnerabilities_nothing_applicable(self):
        vlist = VulnerabilityList(producer="import", key="wordpress")
        v1 = vlist.get_vulnerability("1", create_missing=True)
        v1.add_affected_version(VersionRange(introduced_in="2.0", fixed_in="2.1"))

        manager = VulnerabilityManager(storage=self.empty_storage)
        self.assertEqual([], list(manager.filter_for_version("1.0", [vlist])))

    def test_filter_applicable_vulnerabilities_some_found(self):
        vlist = VulnerabilityList(producer="import", key="wordpress")
        v1 = vlist.get_vulnerability("1", create_missing=True)
        v1.add_affected_version(VersionRange(introduced_in="0.9", fixed_in="2.1"))

        manager = VulnerabilityManager(storage=self.empty_storage)
        self.assertEqual([v1], list(manager.filter_for_version("1.0", [vlist])))

    def test_find_vulnerability_by_reference_number(self):
        manager = VulnerabilityManager(storage=self.empty_storage)

        vlist_a = VulnerabilityList(producer="MyProducerA", key="plugins/some-key")
        vlist_b = VulnerabilityList(producer="MyProducerB", key="plugins/some-key")
        vlist_c = VulnerabilityList(producer="MyProducerC", key="plugins/some-key")

        osvdb4444 = vlist_a.get_vulnerability('1122', create_missing=True)
        osvdb4444.references = [
            Reference(type="osvdb", id="2013-4444"),
        ]
        cve20131234 = vlist_b.get_vulnerability('1234', create_missing=True)
        cve20131234.references = [
            Reference(type="cve", id="2013-1234"),
        ]
        cve20134444 = vlist_c.get_vulnerability('1122', create_missing=True)
        cve20134444.references = [
            Reference(type="cve", id="2013-4444"),
        ]

        storage = MagicMock()
        storage.list_vulnerabilities.return_value = [
            vlist_a,
            vlist_b,
            vlist_c,
        ]

        manager = VulnerabilityManager(storage=storage)
        self.assertIs(cve20131234, manager.find_vulnerability("plugins", "some-key",
                                                              match_reference=Reference(type="cve", id="2013-1234")))
        self.assertIs(cve20134444, manager.find_vulnerability("plugins/some-key",
                                                              match_reference=Reference(type="cve", id="2013-4444")))

        with self.assertRaises(VulnerabilityNotFound):
            manager.find_vulnerability("plugins/some-key", match_reference=Reference(type="cve", id="1111-1111"))


class VulnerabilityMatchingTest(TestCase):

    def test_no_filters(self):
        self.assertTrue(Vulnerability(id="1234").matches())

    def test_reference_does_not_match(self):
        self.assertFalse(Vulnerability(id="1234").matches(match_reference=Reference(type="test", id="1234")))

    def test_reference_matches_by_id(self):
        refs = [Reference(type="test", id="1234")]
        self.assertTrue(Vulnerability(id="1234", references=refs).
                        matches(match_reference=Reference(type="test", id="1234")))

    def test_reference_matches_by_url(self):
        refs = [Reference(type="test", url="1234")]
        self.assertTrue(Vulnerability(id="1234", references=refs).
                        matches(match_reference=Reference(type="test", url="1234")))

    def test_reference_matches_by_id_but_not_type(self):
        refs = [Reference(type="test", id="1234")]
        self.assertFalse(Vulnerability(id="1234", references=refs).
                         matches(match_reference=Reference(type="test2", id="1234")))
