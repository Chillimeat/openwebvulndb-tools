from unittest import TestCase
from unittest.mock import MagicMock
from openwebvulndb.common import VulnerabilityManager, VulnerabilityList
from openwebvulndb.common.errors import VulnerabilityNotFound


class VulnerabilityManagerTest(TestCase):

    def setUp(self):
        self.empty_storage = MagicMock()
        self.empty_storage.read_vulnerabilities.side_effect = FileNotFoundError()

    def test_manager_starts_with_nothing_open(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        self.assertEqual(0, len(manager.files))

    def test_obtained_vulnerability_list_contains_producer(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        data = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        self.assertIsInstance(data, VulnerabilityList)
        self.assertEqual(data.producer, "VaneImporter")
        self.assertEqual(data.key, "plugins/some-key")

    def test_check_identity(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        a_1 = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        a_2 = manager.get_producer_list("VaneImporter", "plugins", "some")
        b_1 = manager.get_producer_list("ImporterX", "plugins", "some-key")

        same = manager.get_producer_list("VaneImporter", "plugins", "some-key")

        self.assertIs(a_1, same)

        self.assertIsNot(a_1, a_2)
        self.assertIsNot(b_1, a_2)
        self.assertIsNot(b_1, a_1)

    def test_create_missing_vulnerabilities(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")

        a_1 = vlist.get_vulnerability(123, create_missing=True)
        a_2 = vlist.get_vulnerability("123", create_missing=True)
        self.assertIs(a_1, a_2)

    def test_read_missing(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")

        with self.assertRaises(VulnerabilityNotFound):
            vlist.get_vulnerability(123)

    def test_load_existing_data(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        vlist.get_vulnerability(123, create_missing=True).title = "Hello World"

        storage = MagicMock()
        storage.read_vulnerabilities.return_value = vlist

        manager = VulnerabilityManager(storage=storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")

        self.assertEqual(vlist.get_vulnerability(123).title, "Hello World")

    def test_no_write_until_flush(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        vlist.get_vulnerability(123, create_missing=True).title = "Hello World"

        self.empty_storage.write_vulnerabilities.assert_not_called()

        manager.flush()

        self.empty_storage.write_vulnerabilities.assert_called_with(vlist)
        self.empty_storage.reset_mock()

        # Subsequent flush does not write
        manager.flush()
        self.empty_storage.write_vulnerabilities.assert_not_called()

    def test_do_not_write_empty_files(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        manager.get_producer_list("VaneImporter", "plugins", "some-key")

        self.empty_storage.write_vulnerabilities.assert_not_called()

        # Make sure we do not write when there are no changes
        manager.flush()

        self.empty_storage.write_vulnerabilities.assert_not_called()

    def test_write_new_files(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        vlist.get_vulnerability(123, create_missing=True).title = "Hello World"

        self.empty_storage.write_vulnerabilities.assert_not_called()

        # Make sure we do not write when there are no changes
        manager.flush()

        self.empty_storage.write_vulnerabilities.assert_called_with(vlist)

    def test_changes_trigger_write(self):
        manager = VulnerabilityManager(storage=self.empty_storage)
        vlist = manager.get_producer_list("VaneImporter", "plugins", "some-key")
        vlist.get_vulnerability(123, create_missing=True).title = "Hello World"

        self.assertTrue(vlist.dirty)

        vlist.clean()
        self.assertFalse(vlist.dirty)

        vlist.get_vulnerability(123, create_missing=True).title = "Hello World"
        self.assertFalse(vlist.dirty)

        vlist.get_vulnerability(123, create_missing=True).title = "Different Value"
        self.assertTrue(vlist.dirty)
